内容提供器(Content Provider)
	跨程序数据共享(在不同的应用程序之间实现数据共享的功能)，在保证被访数据的安全性前提下允许一个程序访问另一个程序中的数据

运行时权限
	在软件的使用过程中再对某一项权限申请进行授权(而不是在安装软件时一次性授权所有权限)，即便没有这个权限只是这个功能不能使用，不影响软件的安装和其他功能使用
	普通权限:不会直接威胁到用户的安全和隐私的权限，系统会自动进行授权，不需要用户手动操作(eg:网络连接，开机启动等)
	危险权限:可能触及用户因此或对设备安全性造成影响的权限，必须用户手动点击授权才可以，否则程序无法使用相应功能(eg:获取联系人信息，定位设备地理位置等)
		危险权限9组24个权限，其他都是普通权限
	普通权限->在AndroidMainifest.xml中添加权限声明就可以
	危险权限(Android6.0版本以上)->进行运行时权限处理，进行运行时权限处理时使用的是权限名，一旦用户同意授权，则该权限对应的权限组的其他权限也同时被授权
	权限表参考:http://developer.android.google.cn/reference/android/Mainifest.permission.html
	运行时权限处理(危险权限)步骤(逻辑还是比较简单的，就是用到新的东西可能一下子难以接受)
		①判断用户是否已经授权了
			ContextCompat.checkSelfPermission(当前Context, 具体的权限名<android包下的>)与PackageManager.PERMISSION_GRANTED作比较
			若相等说明已授权->直接执行自定义的逻辑操作即可
			若不相等说明未授权->②
		②进行用户授权
			ActivityCompat.requestPermissions(当前Context, 权限列表(数组),唯一标识<对应③的requestCode>)
		③不论授权成功与否都会回调当前活动的onRequestPermissionsResult()->因此需要覆写
			唯一标识存放在requestCode中，先判断唯一标识是否与②设置的相同
			when(requestCode){
				1->
					...
			}
			如果相同，授权结果封装在grantResults中，再判断grantResults.isNotEmpty() && grantResults[0] == PackageManager.PERMISSION_GRANTED
				若为true则说明授权成功->执行自定义逻辑操作
				若为false说明授权失败->提示错误信息(当前功能不能实现)
			如果不同，什么都不做->仅仅代表授权成功/失败了(没有提示，用户根本就不知道到底授权成功还是失败了)

访问其他程序中的数据
	内容提供器:1.使用现有的内容提供器来读取和操作相应程序中的数据2.创建自定义的内容提供其给程序的数据提供外部访问接口(暂时不用)
		如果一个应用程序通过内容提供器对其数据提供了外部访问接口，则任何其他的应用程序都可以对这部分数据进行访问
	使用现有内容提供器步骤:
		①主要就是通过ContentResolver对象(Context中本身就存在contentResolver对象)，使用该对象对数据进行CRUD操作(类似于SQLite数据库那些API方法)
			update()/insert()/query()...
		②这些方法有对应的API，只不过操作的对象不再是数据库，而是Uri对象
			Uri对象由URI字符串解析(Uri.parse(uriStr))
			URI字符串="content://"+authority(不同应用程序作区分)+path(程序的不同表作区分)
			一般常见的操作都是存在系统Uri对象->ContactContent.CommonDataKinds中已经封装的常见的Uri常量
		③调用这些方法返回的依旧是一个Cursor对象，直接操作该对象获取数据即可(字段的名称也会被ContactContent.CommonDataKinds封装，直接调用即可)
		**④若使用到某些权限，一定要在AndroidMainifest.xml中添加权限声明
